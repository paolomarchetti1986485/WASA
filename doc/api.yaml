openapi: 3.0.0
info:
  description: WASAPhoto app backend REST API
  title: WASAPhoto API
  version: 1.0.0
tags:
  - name: user
    description: Operations related to user management
  - name: photo
    description: Operations related to photo management
  - name: login
    description: Operations related to login management
  - name: like
    description: Operations related to likes management
  - name: comment
    description: Operations related to comments management
  - name: ban
    description: Operations related to bans management
  - name: follow
    description: Operations related to followers management
    
components:
  securitySchemes:
      loginAuth:            
        type: http
        scheme: bearer
        description: security schema
        bearerFormat: JWT    
  parameters:
    userId:
      name: userId
      in: path
      description: User's ID
      required: true
      schema:
        $ref: "#/components/schemas/User/properties/id"
    photoId:
      name: photoId
      in: path
      description: Photo's ID
      required: true
      schema:
        $ref: "#/components/schemas/Photo/properties/id"
    commentId:
      name: commentId
      in: path
      description: Comment's ID
      required: true
      schema:
        $ref: "#/components/schemas/Comment/properties/commentId"
    likeId:
      name: likeId
      in: path
      description: ID of the user who liked a specific photo
      required: true
      schema:
        $ref: "#/components/schemas/User/properties/id"
    followerId:
      name: followerId
      in: path
      description: Follower's ID
      required: true
      schema:
        $ref: "#/components/schemas/User/properties/id"
    bannedId:
      name: bannedId
      in: path
      description: Banned user's ID
      required: true
      schema:
        $ref: "#/components/schemas/User/properties/id"
  
  schemas:
    Username:
      title: Username
      description: This object represent the user's username
      type: string
      example: "user"
      pattern: '^.*?$'
      minLength: 3
      maxLength: 20
    UserId:
      title: Id
      description: This object represent the user's ID
      type: integer
      example: 0
      readOnly: true
    Login:
      description: Identifier sent by user during the login
      type: object
      properties:
        identifier:
          $ref: "#/components/schemas/User/properties/username"
    User:
      title: User
      description: This object represent a user in WASAPhoto
      type: object
      properties:
        id:
          $ref: "#/components/schemas/UserId"
        username:
          $ref: "#/components/schemas/Username"
    CommentId:
      title: Id
      description: This object represent the comment's ID
      type: integer
      example: 0
      readOnly: true
    Comment:
      type: object
      description: comment of a photo
      properties:
        text:
          description: comment text
          type: string
          example: "What a great photo!"
          pattern: '^.*$'
          minLength: 1
          maxLength: 500
        commentId:
          $ref: "#/components/schemas/CommentId"
        userId:
          $ref: "#/components/schemas/User"
    
    Like:
      type: object
      description: like of a photo
      properties:
        likeId:
          $ref: "#/components/schemas/User"
    UnuploadedPhoto:
      title: UnuploadedPhoto
      description: Photo that has been not uploaded yet
      type: string
      minLength: 0
      maxLength: 100
      format: binary
      example: "010110010"
    
    PhotoId:
      title: PhotoId
      description: "This object represent a photo's identifier"
      type: integer
      
    Photo:
      title: Photo
      description: "This object represent a photo in WASAPhoto"
      type: object
      properties:
        id:
          $ref: "#/components/schemas/PhotoId"
        dateTime:
          description: Photo's date of uploading
          type: string
          format: date-time
          example: "2023-11-06T17:32:28Z"
        Comments:
          description: Photo's list of comments
          type: array
          items:
            $ref: "#/components/schemas/Comment"
          minItems: 0  
          maxItems: 1000
        Likes:
          description: Photo's list of likes
          type: array
          items:
            $ref: "#/components/schemas/Like"
          minItems: 0  
          maxItems: 1000
    Profile:
      title: Profile
      description: User's full profile, with followers, followed and photos
      type: object
      properties:
        followers:
          description: List of user's followers
          type: array
          items:
            $ref: "#/components/schemas/User"
          minItems: 0  
          maxItems: 1000
        following:
          description: List of user's followed users
          type: array
          items:
            $ref: "#/components/schemas/User"
          minItems: 0  
          maxItems: 1000
        photos:
          description: User's list of uploaded photo's
          type: array
          items:
            $ref: "#/components/schemas/Photo"
          minItems: 0  
          maxItems: 1000
    Stream:
      title: Stream
      description: "This object represent the stream of a user"
      type: array
      items:
        $ref: "#/components/schemas/Photo"
      minItems: 0
      maxItems: 1000
security:
  - loginAuth: []  
  
paths:
  /session:
    post:
      tags: ["login"]
      summary: Logs in the user
      description: |-
        If the user does not exist, it will be created,
        and an identifier is returned.
        If the user exists, the user identifier is returned.
      operationId: doLogin
      requestBody:
        description: User details
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Login"
        required: true
      responses:
        '201':
          description: User log-in action successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Login"
  /user/:
    get:
      tags: ["user"]
      summary: Search users by their username
      description: Retrieve a list of users whose usernames start with the provided string.
      operationId: searchUsers
      parameters:
      - name: username
        in: query
        required: true
        description: Prefix of the username to search for.
        schema:
          description: String format
          type: string
          example: "john"
          pattern: '^.*?$'
          minLength: 1
          maxLength: 100
      responses:
        "200":
          description: List of users matching the search prefix
          content:
            application/json:
              schema:
                description: User's list
                type: array
                items:
                  $ref: "#/components/schemas/User"
                minItems: 0  
                maxItems: 1000
        "400":
          description: Invalid or missing username parameter
          content:
            application/json:
              schema:
                description: Error message
                type: object
                properties:
                  message:
                    description: Error message
                    type: string
                    example: "Invalid or missing username parameter."
                    pattern: '^.*?$'
                    minLength: 1
                    maxLength: 100
        "404":
          description: No users found matching the search
          content:
            application/json:
              schema:
                description: No users found message
                type: object
                properties:
                  message:
                    description: No users found message
                    type: string
                    example: "No users found matching the search."
                    pattern: '^.*?$'
                    minLength: 1
                    maxLength: 100
  /user/{userId}:
    delete:
      tags: ["user"]
      summary: Delete a user
      description: Deletes a user by their unique ID.
      operationId: deleteUser
      parameters:
        - $ref: '#/components/parameters/userId'
      responses:
        "204":
          description: User deleted successfully
        "400":
          description: Invalid user ID supplied
        "404":
          description: User not found
        "500":
          description: Server error
  /user/{userId}/stream:
    parameters:
      - $ref: "#/components/parameters/userId"
    get:
      tags: ["user"]
      operationId: getMyStream
      summary: Get personal stream
      description: Retrieve a stream of photos from users the current user follows, in reverse chronological order.
      responses:
        "200":
          description: User's stream successfully gotten
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Stream"

  /user/{userId}/username:
    parameters:
      - $ref: "#/components/parameters/userId"
    put:
      tags: ["user"]
      operationId: setMyUserName
      summary: Set username
      description: Allow the user to change their username.
      requestBody:
        content:
          application/json:
            schema: { $ref: "#/components/schemas/UserId"}
      responses:
        '200':
          description: Username set successfully
          content:
            application/json:
              schema:
                description: username
                type: object
                properties:
                  username:
                    $ref: "#/components/schemas/Username"
                  message:
                    description: confirmation message
                    type: string
                    example: "Username has been updated successfully"
                    pattern: '^.*?$'
                    minLength: 1
                    maxLength: 100
                    
  /user/{userId}/profile:
    parameters:
      - $ref: "#/components/parameters/userId"
    get:
      tags: ["user"]
      operationId: getUserProfile
      summary: Get user profile
      description: Retrieve the profile information of a specific user, including their photos, total photo count, followers, and following.
      responses:
        "200":
          description: User's profile successfully gotten
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Profile"
        "404":
          description: User not found
          content:
            application/json:
              schema:
                description: usern not found
                type: object
                properties:
                  message:
                    description: user not found message
                    type: string
                    example: User not found or does not exist.
                    pattern: '^.*?$'
                    minLength: 1
                    maxLength: 100
     
  /user/{userId}/photos/:
    parameters:
     - $ref: "#/components/parameters/userId"
    post:
      tags: ["photo"]
      operationId: uploadPhoto
      summary: Upload Photo
      description: Upload a new photo with date, time, likes and comments.
      requestBody:
        content:
          image/png:
            schema: { $ref: "#/components/schemas/UnuploadedPhoto"}
        required: true
      responses:
        "201":
          description: Photo uploaded successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Photo"
  /user/{userId}/photos/{photoId}:
    parameters:
      - $ref: "#/components/parameters/userId"
      - $ref: "#/components/parameters/photoId"
    delete:
      tags: ["photo"]
      operationId: deletePhoto
      summary: Delete Photo
      description: Allow the user to remove one of their uploaded photos, which also removes associated likes and comments.
      responses:
        "204":
          description: Photo deleted successfully
          
  /user/{userId}/follow/{followerId}:
    parameters:
      - $ref: "#/components/parameters/userId"
      - $ref: "#/components/parameters/followerId"
    put:
      tags: ["follow"]
      operationId: followUser
      summary: Follow user
      description: Follow another user.
      responses:
        "201":
          description: User followed successfully
          content:
            application/json:
              schema:
                description: user followed
                type: object
                properties:
                  message:
                    description: confirmation message
                    type: string
                    example: "You are now following this user."
                    minLength: 1
                    maxLength: 100
        '404':
          description: User not found
          content:
            application/json:
              schema:
                description: user not found
                type: object
                properties:
                  message:
                    description: user not found message
                    type: string
                    example: "User to follow not found."
                    pattern: '^.*?$'
                    minLength: 1
                    maxLength: 100
    delete:
      tags: ["follow"]
      operationId: unfollowUser
      summary: Unfollow user
      description: Unfollow a user the current user is following.
      responses:
        "204":
          description: User unfollowed successfully
        "404":
          description: User not found
          content:
            application/json:
              schema:
                description: user to unfollow
                type: object
                properties:
                  message:
                    description: user not found message
                    type: string
                    example: "User to unfollow not found."
                    pattern: '^.*?$'
                    minLength: 1
                    maxLength: 100
   
  /user/{userId}/ban/{bannedId}:
    parameters:
      - $ref: "#/components/parameters/userId"
      - $ref: "#/components/parameters/bannedId"
    put:
      tags: ["ban"]
      operationId: banUser
      summary: Banned user
      description: Ban a user, making their information inaccessible to the current user.
      responses:
        "201":
          description: User banned successfully
          content:
            application/json:
              schema:
                description: user banned
                type: object
                properties:
                  message:
                    description: confirmation message
                    type: string
                    example: "User has been successfully banned."
                    minLength: 1
                    maxLength: 100
        '404':
          description: User not found
          content:
            application/json:
              schema:
                description: user not found
                type: object
                properties:
                  message:
                    description: user not found message
                    type: string
                    example: "User to ban not found."
                    pattern: '^.*?$'
                    minLength: 1
                    maxLength: 100
    delete:
      tags: ["ban"]
      operationId: unbanUser
      summary: Unban an user
      description: Remove a ban on a previously banned user, restoring their access to the current user's information.
      responses:
        "204":
          description: User unbanned successfully
        "404":
          description: User not found
          content:
            application/json:
              schema:
                description: user not found
                type: object
                properties:
                  message:
                    description: user not found message
                    type: string
                    example: "User to unban not found."
                    pattern: '^.*?$'
                    minLength: 1
                    maxLength: 100
                    
  /photos/{photoId}/likes/{likeId}:
    parameters:
      - $ref: "#/components/parameters/photoId"
      - $ref: "#/components/parameters/likeId"
    put:
      tags: ["like"]
      operationId: likePhoto
      summary: Add like to a photo
      description: Add a like to a specific photo.
      responses:
        "201":
          description: Comment added successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Like/properties/likeId"
        "404":
          description: Photo not found
          content:
            application/json:
              schema:
                description: photo not found
                type: object
                properties:
                  message:
                    description: photo not found message
                    type: string
                    example: "Photo to like not found."
                    pattern: '^.*?$'
                    minLength: 1
                    maxLength: 100
   
    delete:
      tags: ["like"]
      operationId: unlikePhoto
      summary: Remove like from a photo
      description: Remove a specific like from a photo.
      responses:
        "204":
          description: Like removed successfully
        "404":
          description: Photo or like not found
          
  /user/{userId}/photos/{photoId}/comments/:
    parameters:
      - $ref: "#/components/parameters/photoId"
      - $ref: "#/components/parameters/userId"
    post:
      tags: ["comment"]
      operationId: commentPhoto
      summary: Add comment to a photo
      description: Add a comment to a specific photo.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Comment'
      responses:
        "201":
          description: Comment added successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CommentId"
        "404":
          description: Photo not found
          content:
            application/json:
              schema:
                description: photo not found
                type: object
                properties:
                  message:
                    description: photo not found message
                    type: string
                    example: "Photo not found."
                    pattern: '^.*?$'
                    minLength: 3
                    maxLength: 100
  /user/{userId}/photos/{photoId}/comments/{commentId}:
    parameters:
      - $ref: "#/components/parameters/photoId"
      - $ref: "#/components/parameters/userId"
      - $ref: "#/components/parameters/commentId"
    delete:
      tags: ["comment"]
      operationId: uncommentPhoto
      summary: Remove comment from a photo
      description: Remove a specific comment from a photo.
      responses:
        "204":
          description: Comment removed successfully
        "404":
          description: Photo or comment not found
          content:
            application/json:
              schema:
                description: comment not found
                type: object
                properties:
                  message:
                    description: photo not found message
                    type: string
                    example: "Photo or comment not found."
                    pattern: '^.*?$'
                    minLength: 3
                    maxLength: 100
  /photos/{photoId}/image:
      parameters:
        - $ref: "#/components/parameters/photoId"
      get:
        tags: ["photo"]
        operationId: getPhotoImage
        summary: Retrieve a photo's image data
        description: Allow the user to retrieve the image data of a specific photo by its ID.
        responses:
          "200":
            description: Photo image retrieved successfully
            content:
              image/jpeg:
                schema:
                  description: Image retrieved successfully
                  type: string
                  format: binary
          "400":
            description: Invalid photo ID supplied
            content:
              application/json:
                schema:
                  description: Invalid ID
                  type: object
                  properties:
                    message:
                      description: Invalid ID
                      type: string
                      example: "Invalid photo ID."
          "404":
            description: Photo not found
            content:
              application/json:
                schema:
                  description: Photo not exists
                  type: object
                  properties:
                    message:
                      description: Photo not found
                      type: string
                      example: "Image not found."
          "500":
            description: Server error
            content:
              application/json:
                schema:
                  description: Error from the server
                  type: object
                  properties:
                    message:
                      description: Impossible to get photo data
                      type: string
                      example: "Failed to get photo data."                    
